"""
DFS(Depth-First Search) 깊이 우선 탐색이라고도 부르며, 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘이다.
그래프는 크게 2가지 방식으로 표현할 수 있다.
- 인접 행렬(adjacency Matrix) : 2차원 배열로 그래프의 연결 관계를 표현하는 방식
- 인접 리스트(adjacency List) : 리스트로 그래프의 연결 관계를 표현하는 방식

인접 리스트는 '연결 리스트'라는 자료구조를 이용해 구현하는데, C++나 자바와 같은 프로그래밍 언어에서는 별도로 
연결 리스트 기능을 위한 표준 라이브러리를 제공한다. 반면엔 파이썬은 기본 자료형인 리스트 자료형이 append()와 메소드를 제공하므로, 전통적인
프로그래밍 언어에서의 배열과 연결 리스트의 기능을 모두 기본으로 제공한다.
"""
# 인접 행렬 방식 예제
# 연결이 되어 있지 않은 노드끼리는 무한(infinity)의 비용이라고 작성한다
INF = 999999999 # 무한의 비용 선언

graph = [
    [0, 7, 5], 
    [7, 0, INF], 
    [5, INF, 0], 
]

print("graph : ", graph)

# 인접 리스트 방식 예제
# 행(Row)이 3개인 2차원 리스트로 인접 리스트 표현
graph = [[] for _ in range(3)]

# 노드 0에 연결된 노드 정보 저장(노드, 거리)
graph[0].append((1, 7))
graph[0].append((2, 5))

# 노드 1에 연결된 노드 정보 저장(노드, 거리)
graph[1].append((0, 7))

# 노드 2에 연결된 노드 정보 저장(노드, 거리)
graph[2].append((0, 5))

print("graph : ", graph)

"""
이 두 방식은 어떤 차이가 있을까?
메모리 측면 : 인접 행렬 방식은 모든 관계를 저장하므로 노드 개수가 많을수록 메모리가 불필요하게 낭비된다.
반면에 인접 리스트 방식은 연결된 정보만을 저장하기 떄문에 메모리를 효율적으로 사용한다.
하지만 이와 같은 속성 때문에 인접 리스트 방식은 인접 행렬 방식에 비해 특정한 두 노드가 연결되어 있는지에 대한
정보를 얻는 속도가 느리다. 인접 리스트 방식에서는 연결된 데이터를 하나씩 확인해야 하기 때문이다.

또 다른 예시로 한 그래프에서 노드 1과 노드 7이 연결되어 있는 상황을 생각해보자.
인접 행렬 방식에는 graph[1][7]만 확인하면 된다. 반면에 인접 리스트 방식에서는 노드 1에 대한 인접 리스트를
앞에서부터 차례대로 확인해야 한다. 그러므로 특정한 노드와 연결된 모든 인접 노드를 순회해야 하는 경우, 인접 리스트 방식이 
인접 행렬 방식에 비해 메모리 공간의 낭비가 적다.
"""